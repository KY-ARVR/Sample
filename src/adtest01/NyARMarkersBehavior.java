package adtest01;// NyARMarkersBehavior.java// Andrew Davison, ad@fivedots.coe.psu.ac.th, April 2010/* A time-based triggered behaviour which uses a detector to   update the position of model drawn above markers.*/import java.awt.image.BufferedImage;import java.awt.image.ConvolveOp;import java.awt.image.Kernel;import java.util.Enumeration;import javax.media.Buffer;import javax.media.j3d.*;import javax.vecmath.*;import jp.nyatla.nyartoolkit.jmf.utils.*;import jp.nyatla.nyartoolkit.java3d.utils.*;import jp.nyatla.nyartoolkit.core.*;import jp.nyatla.nyartoolkit.core.param.NyARParam;//import jp.nyatla.nyartoolkit.detector.*;import jp.nyatla.nyartoolkit.core.types.*;public class NyARMarkersBehaviorextends      Behaviorimplements   JmfCaptureListener{  private final double FPS = 30.0;  // so executes about 30 times/sec    private Background        background;  private DetectMarkers     detectMarkers;   // the detector for the markers    private WakeupCondition   wakeup;    private JmfCaptureDevice  captureDev;   // captures the camera image  private J3dNyARRaster_RGB rasterRGB;   // the camera image      public NyARMarkersBehavior (NyARParam params, Background bg, DetectMarkers ms)  {    super ();    this.background    = bg;    this.detectMarkers = ms;    this.wakeup        = new WakeupOnElapsedTime ((int)(1000.0/FPS));        setSchedulingBounds (new BoundingSphere(new Point3d (), 100.0) );        initCaptureDevice   (params);  }  // end of NyARMarkersBehavior()        //////////////////////////////////////////////////////////////////////  // -- Implementation of methods from "Behavior".                 -- //  //////////////////////////////////////////////////////////////////////    public void initialize ()  {    wakeupOn(wakeup);  }    @SuppressWarnings ({"rawtypes"})  public void processStimulus (Enumeration criteria)  /* use the detector to update the models on the markers */  {    try    {      synchronized (rasterRGB)      {        if (background != null)        {          ImageComponent2D imageComponent = null;                    rasterRGB.renewImageComponent2D ();          imageComponent = rasterRGB.getImageComponent2D ();//          processSceneImageComponent (imageComponent);          background.setImage (imageComponent);  // refresh background        }      }      detectMarkers.updateModels (rasterRGB);      wakeupOn (wakeup);    }    catch (Exception e)    {      e.printStackTrace();    }  }  // end of processStimulus()        //////////////////////////////////////////////////////////////////////  // -- Implementation of methods from "JmfCaptureListener".       -- //  //////////////////////////////////////////////////////////////////////    @Override  public void onUpdateBuffer(Buffer buf)  // triggered by JmfCaptureListener event  {    try    {      synchronized (rasterRGB)      {        rasterRGB.setBuffer(buf);      }    }    catch (Exception e)    {      e.printStackTrace ();    }  }  // end of onUpdateBuffer()        //////////////////////////////////////////////////////////////////////  // -- Implementation of auxiliary methods.                       -- //  //////////////////////////////////////////////////////////////////////    private void initCaptureDevice(NyARParam params)  {    NyARIntSize screenSize = params.getScreenSize();        try    {      JmfCaptureDeviceList devlist = new JmfCaptureDeviceList();  // get devices      captureDev = devlist.getDevice (0);   // use the first      captureDev.setCaptureFormat (screenSize.w, screenSize.h, 15.0f);      captureDev.setOnCapture     (this);            rasterRGB = new J3dNyARRaster_RGB (params, captureDev.getCaptureFormat());  // create raster             detectMarkers.createDetector(params, rasterRGB);   // initialise detector            captureDev.start();     }    catch (NyARException e)    {      System.out.println (e);      System.exit        (1);    }  }  // end of initCaptureDevice()    // Kernel taken from -> "http://www.informit.com/articles/article.aspx?p=1013851&seqNum=5"  // Kernel for relief: {-2, 0, 0, 0, 1, 0, 0, 0, 2}, see -> "http://programming.mesexemples.com/java/awt-advanced-graphics/java-embosse-an-image-using-kernel-class/"  private void processSceneImageComponent (ImageComponent2D imageComponent)  {    BufferedImage image             = null;    ConvolveOp    convolveOperation = null;    float[]       kernelData        = null;        image             = imageComponent.getImage ();    kernelData        = new float[] {  0.0f, -1.0f,  0.0f,                                      -1.0f,  5.0f, -1.0f,                                       0.0f, -1.0f,  0.0f};    convolveOperation = new ConvolveOp (new Kernel (3, 3, kernelData));        image = convolveOperation.filter (image, null);    imageComponent.set               (image);  }  /*  public void stop()  {  captureDev.stop();  }*/}  // end of NyARMarkersBehavior class